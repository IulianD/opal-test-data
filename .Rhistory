sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
datashield.errors()
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
datashield.errors()
datashield.logout(opals)
# login:
opals <- datashield.login(logins = logindata)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
datashield.errors()
datashield.logout(opals)
# login:
opals <- datashield.login(logins = logindata)
y <- datashield.aggregate(opals, quote(selfUpgrade('resourcex' ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
datashield.errors()
library(dsSwissKnifeClient) ## prefix dss
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos', 'maas')){
c('sib')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
y <- datashield.aggregate(opals, quote(selfUpgrade('dsQueryLibraryServer' ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
dsqShowQueries()
datashield.errors()
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
dsqShowQueries()
x <- dsqShowQueries()
str(x)
x$sib$accelerate_db
y <- datashield.aggregate(opals, quote(selfUpgrade('dsQueryLibraryServer' ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
x <- dsqShowQueries(force.download = TRUE)
datashield.logout(opals)
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
x <- dsqShowQueries(force.download = TRUE)
x$sib$accelerate_db
datashield.logout(opals)
builder <- newDSLoginBuilder()
builder <- newDSLoginBuilder()
for(srv in c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
#c('sib')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
y <- datashield.aggregate(opals, quote(selfUpgrade('dsQueryLibraryServer' ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
?system.time
system.time(dsqRun(domain = 'measurement', query_name = 'M01'))
datashield.errors()
datashield.logout(opals)
# login:
opals <- datashield.login(logins = logindata)
datashield.logout(pals)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
system.time(x <- dsqRun(domain = 'measurement', query_name = 'M01'))
x
fix(dsqRun)
fix(dsqShowQueries)
fix(dsqRun)
system.time(x <- dsqRun(domain = 'measurement', query_name = 'M01'))
datashield.logout(opals)
library(dsSwissKnifeClient) ## prefix dss
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in# c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('extend')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
library(dsSwissKnifeClient) ## prefix dss
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('extend')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
system.time(x <- dsqRun(domain = 'measurement', query_name = 'ME01'))
x
y <- datashield.aggregate(opals, quote(selfUpgrade('dsQueryLibraryServer' ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
system.time(x <- dsqRun(domain = 'measurement', query_name = 'ME01'))
y
x
dsqShowQueries()
dsqShowQueries()
datashield.logout(opals)
opals <- datashield.login(logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
x <-dsqShowQueries()
x <-dsqShowQueries(force.download = TRUE)
X
x
datashield.logout(opals)
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
dsqRun('concept_name', 'measurement')
ds.summary('measurement')
datashield.logout(opals)
library(dsSwissKnifeClient) ## prefix dss
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('maas')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
# login:
opals <- datashield.login(logins = logindata)
logindata
# login:
opals <- datashield.login(logins = logindata)
# login:
opals <- datashield.login(logins = logindata)
# login:
opals <- datashield.login(logins = logindata)
data("iris")
head(iris)
iris$Sepal.Length[7,10,13]
iris$Sepal.Length[c(7,10,13)]
iris$Sepal.Length[c(7,10,13)] <- NA
iris[iris$Sepal.Length >4,]
iris[iris$Sepal.Width >4,]
iris[iris$Sepal.Width ==3.2,]
iris[iris$Species =='setosa',]
iris$Sepal.Length[c(7,10,13)] <- NaN
iris[iris$Species =='setosa',]
iris[iris$Sepal.Width ==3.2,]
iris[iris$Sepal.Width > 3.2,]
iris[iris$Sepal.Length ==3.2,]
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('kul')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
system.time(x <- dsqRun(domain = 'measurement', query_name = 'ME01'))
x
datashield.logout(opals)
library(dsSwissKnifeClient) ## prefix dss
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('maas')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
?dsqLoad getOption('datashield.username')
datashield.logout(opals)
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('kul')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
?dsqLoad
dsQueryLibrary::dsqLoad(symbol= 'measurement',
domain = 'concept_name',
query_name = 'measurement_limit',
where_clause = NULL,
#       row_limit = 10,
input = c(0,10),
union = TRUE,
datasources = opals)
ds.summary('measurement')
ds.table('measurement$person_id')
ds.table1D('measurement$person_id')
datashield.logout(opals)
library(dsSwissKnifeClient) ## prefix dss
library(dsQueryLibrary) ### prefix dsq
library(dsBaseClient) ### prefix ds.
# replace this with your own login.R script:
source('/mnt/shareddisk/Sophia/jamboree_2022/login.R')
builder <- newDSLoginBuilder()
for(srv in #c('sib', 'dpv', 'kul', 'nok', 'nn', 'ts', 'emc', 'abos')){
c('maas')){
builder$append(server=srv, url=paste0('https://sophia-fdb.vital-it.ch/',srv),
user = getOption('datashield.username'), password = getOption('datashield.password'),
driver = "OpalDriver")
}
logindata <- builder$build()
# login:
opals <- datashield.login(logins = logindata)
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
projects
projects <- sapply(names(projects), function(x){
return(projects[[x]][!(projects[[x]]$name %in% c('sophia', 'omop_test', 'my_sophia_project', 'a_test', 'abosomics')),,drop = FALSE])
}, simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
opal.resource(opals$maas@opal)
opal.resource(opals$maas@opal, 'sophia')
opal.resources(opals$maas@opal, 'sophia')
opals
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
projects
projects <- sapply(opals, function(x) opal.projects(x@opal), simplify = FALSE)
# each project corresponds to a cohort
# for each remote server, for each cohort check what database resources are available and load them in the respective remote session:
sapply(names(opals), function(this.opal){
sapply(projects[[this.opal]]$name, function(this.project){
this.project <- as.character(this.project)
# check the resources
res <- opal.resources(opals[[this.opal]]@opal, this.project)
# and load them with the name <project>_<resource>:
qualified_res_name <- paste0(this.project, '.', res$name)
symbol_name <- paste0(this.project, '_', res$name)
datashield.assign.resource (opals[this.opal], symbol_name, qualified_res_name )
return(res)
}, simplify = FALSE)
}, simplify = FALSE)
#datashield.assign.resource (opals['sib'], 'colaus_db', 'colaus.db' )
datashield.symbols(opals)
dsQueryLibrary::dsqLoad(symbol= 'measurement',
domain = 'concept_name',
query_name = 'measurement_limit',
where_clause = NULL,
#       row_limit = 10,
input = c(0,100),
union = TRUE,
datasources = opals)
ds.summary('measurement')
datashield.symbols(opals)
ds.summary('measurement')
datashield.errors()
y <- datashield.aggregate(opals, quote(selfUpgrade('dsBase' ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
datashield.errors()
y <- datashield.aggregate(opals, quote(selfUpgrade(NULL ,NULL, NULL, NULL , NULL, TRUE)), async = FALSE)
setwd('/mnt/shareddisk/opal-test-data/')
library(jsonlite)
load('brca.RData')
ls()
head(brca)
str(brca)
